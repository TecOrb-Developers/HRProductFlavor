plugins {
    id 'com.android.application'
}

def apikeyPropertiesFile = rootProject.file("key.properties");
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    compileSdk 32
    defaultConfig {
        applicationId "com.example.flavors"
        minSdk 22
        targetSdk 32
        versionCode 1
        versionName "1.0"
        buildConfigField("String", "apikey", apikeyProperties['apikey'])
        resValue "string", "apikey", apikeyProperties['apikey']
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(apikeyProperties['storeFile'])
            storePassword apikeyProperties['storePassword']
            keyAlias apikeyProperties['keyAlias']
            keyPassword apikeyProperties['keyPassword']
        }
    }

    flavorDimensions "env"
    productFlavors {

        free {
            applicationId "com.example.flavors.free"
            dimension "env"
            manifestPlaceholders = [appLevel : "FreeApp"]
        }

        paid {
            applicationId "com.example.flavors.paid"
            dimension "env"
            manifestPlaceholders = [appLevel : "PaidApp"]
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", '"https://server.stg.co/API/Release"'
            buildConfigField "String", "ENVIRONMENT", '"Release"';
            signingConfig signingConfigs.debug
        }
        stg {
            initWith debug
            buildConfigField "String", "BASE_URL", '"https://server.stg.co/API/Stag"'
            buildConfigField "String", "ENVIRONMENT", '"Stag"';

        }
        debug {
            initWith debug
            buildConfigField "String", "BASE_URL", '"https://server.debug.co/API/Debug"'
            buildConfigField "String", "ENVIRONMENT", '"Debug"';

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    dataBinding {
        enabled true
    }

    sourceSets {
        free {
            res {
                srcDirs 'src/free/res'
            }
            java {
                srcDirs 'src/free/java'
            }
        }
        paid {
            res {
                srcDirs 'src/paid/res'
            }
            java {
                srcDirs 'src/paid/java'
            }
        }
    }

    variantFilter { variant ->
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if(variant.name == 'stagingDebug' || variant.name == 'debugingRelease' || variant.name == 'productionDebug') {
            variant.setIgnore(true);
        }
    }
    buildFeatures {
        viewBinding true
    }


}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    debugImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    implementation "androidx.work:work-runtime:2.7.1"
    implementation files('libs/oppwa.mobile.aar')
    freeImplementation files('libs/ipworks3ds_sdk.aar')
    paidImplementation files('libs/ipworks3ds_sdk_deploy.aar')
    //debugingImplementation files('libs/ipworks3ds_sdk.aar')

}